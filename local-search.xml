<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Ajax实现注册登录功能</title>
    <link href="/2023/12/04/%E4%BD%BF%E7%94%A8Ajax%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/12/04/%E4%BD%BF%E7%94%A8Ajax%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="使用Ajax实现注册登录功能"><a href="#使用Ajax实现注册登录功能" class="headerlink" title="使用Ajax实现注册登录功能"></a>使用Ajax实现注册登录功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">要求：1.可以上传头像 保存到media文件夹下(开启media事务)浏览器可以访问</span><br><span class="hljs-string"> 2.用户名不能重复，输入框失去焦点(blur)时验证 如存在弹出(alert)用户名已存在</span><br><span class="hljs-string"> 3.邮箱和用户名都可以登录 正则匹配</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect, HttpResponse<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> auth<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">import</span> os, re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">regi</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        username = request.POST.get(<span class="hljs-string">&#x27;usr&#x27;</span>)<br>        email = request.POST.get(<span class="hljs-string">&#x27;email&#x27;</span>)<br>        password = request.POST.get(<span class="hljs-string">&#x27;pwd&#x27;</span>)<br>        file = request.FILES.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>        file_name = <span class="hljs-built_in">str</span>(file)<br>        file_path = os.path.join(<span class="hljs-string">&#x27;media&#x27;</span>, username + file_name)<br>        usr_obj = User.objects.<span class="hljs-built_in">filter</span>(username=username).first()<br>        <span class="hljs-keyword">if</span> usr_obj:<br>            data = &#123;<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;用户名已存在&#x27;</span>&#125;<br>            <span class="hljs-keyword">return</span> JsonResponse(data)<br>        <span class="hljs-keyword">if</span> file:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                <span class="hljs-keyword">if</span> file:<br>                    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>                        f.write(line)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;未上传图片&#x27;</span>&#125;)<br>            <span class="hljs-keyword">if</span> username <span class="hljs-keyword">and</span> password:<br>                user = User.objects.create_user(username=username, password=password, email=email)<br>                <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-string">&#x27;200&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&#x27;/login/&#x27;</span>&#125;)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;regi.html&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        username = request.POST.get(<span class="hljs-string">&#x27;usr&#x27;</span>)<br>        password = request.POST.get(<span class="hljs-string">&#x27;pwd&#x27;</span>)<br>        pattern = <span class="hljs-string">r&#x27;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$&#x27;</span><br>        <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(pattern, username)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>            usr_obj = User.objects.<span class="hljs-built_in">filter</span>(email=username).first()<br>            user = auth.authenticate(username=usr_obj.username, password=password)  <span class="hljs-comment"># 验证用户名及密码是否正确</span><br>            <span class="hljs-keyword">if</span> user:<br>                auth.login(request, user)  <span class="hljs-comment"># 生成一个session数据，保存用户登陆状态</span><br>                <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-string">&#x27;200&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&#x27;/home/&#x27;</span>&#125;)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&#x27;/login/&#x27;</span>&#125;)<br>        <span class="hljs-keyword">else</span>:<br>            user = auth.authenticate(username=username, password=password)<br>            <span class="hljs-keyword">if</span> user:<br>                auth.login(request, user)  <span class="hljs-comment"># 生成一个session数据，保存用户登陆状态</span><br>                <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-string">&#x27;200&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&#x27;/home/&#x27;</span>&#125;)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&#x27;/login/&#x27;</span>&#125;)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;home.html&#x27;</span>)<br><br><br><span class="hljs-comment"># regi.html  只展示js代码</span><br>&lt;script&gt;<br>    $(<span class="hljs-string">&#x27;#zc&#x27;</span>).click(function () &#123;<br>        var formdata = new FormData()<br>        formdata.append(<span class="hljs-string">&#x27;email&#x27;</span>,$(<span class="hljs-string">&#x27;#email&#x27;</span>).val())<br>        formdata.append(<span class="hljs-string">&#x27;pwd&#x27;</span>,$(<span class="hljs-string">&#x27;#pwd&#x27;</span>).val())<br>        formdata.append(<span class="hljs-string">&#x27;usr&#x27;</span>,$(<span class="hljs-string">&#x27;#usr&#x27;</span>).val())<br>        formdata.append(<span class="hljs-string">&#x27;file&#x27;</span>,$(<span class="hljs-string">&quot;#file&quot;</span>)[<span class="hljs-number">0</span>].files[<span class="hljs-number">0</span>])<br>        $.ajax(&#123;<br>            url:<span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>            data:formdata,<br>            contentType:false,<br>            processData: false,<br>            success:function (res) &#123;<br>                <span class="hljs-keyword">if</span> (res.code == <span class="hljs-string">&#x27;200&#x27;</span>)&#123;<br>                    window.location.href = res.url<br>                &#125;<br>                <span class="hljs-keyword">if</span> (res.code == <span class="hljs-string">&#x27;101&#x27;</span>)&#123;<br>                    alert(res.msg)<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &#125;)<br>    $(<span class="hljs-string">&#x27;#usr&#x27;</span>).blur(function ()&#123;<br>        var usr = $(<span class="hljs-string">&#x27;#usr&#x27;</span>).val()<br>        $.ajax(&#123;<br>            url:<span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>            data:&#123;usr&#125;,<br>            success:function (res) &#123;<br>                <span class="hljs-keyword">if</span> (res.code == <span class="hljs-string">&#x27;100&#x27;</span>)&#123;<br>                    alert(res.msg)<br>                &#125;<br><br>            &#125;<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br><br><span class="hljs-comment"># login.html</span><br>&lt;script&gt;<br>    $(<span class="hljs-string">&#x27;#dl&#x27;</span>).click(function () &#123;<br>        var usr = $(<span class="hljs-string">&#x27;#usr&#x27;</span>).val()<br>        var pwd = $(<span class="hljs-string">&#x27;#pwd&#x27;</span>).val()<br>        console.log(usr)<br>        console.log(pwd)<br>        $.ajax(&#123;<br>            url:<span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>            data:&#123;usr, pwd&#125;,<br>            success:function (res) &#123;<br>                <span class="hljs-keyword">if</span> (res.code == <span class="hljs-string">&#x27;200&#x27;</span>)&#123;<br>                    window.location.href = res.url<br>                &#125;<br>                <span class="hljs-keyword">if</span> (res.code == <span class="hljs-string">&#x27;100&#x27;</span>)&#123;<br>                    window.location.href = res.url<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br><br><span class="hljs-comment"># urls.py  匹配图片路径</span><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br>re_path(<span class="hljs-string">r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;</span>, serve, &#123;<span class="hljs-string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;, name=<span class="hljs-string">&#x27;media&#x27;</span>),<br><br><span class="hljs-comment"># settings.py</span><br><span class="hljs-keyword">import</span> os<br>MEDIA_ROOT = os.path.join(BASE_DIR, <span class="hljs-string">&#x27;media&#x27;</span>)<br>MEDIA_URL = <span class="hljs-string">&#x27;/media/&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Loguru的使用</title>
    <link href="/2023/12/04/Loguru%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/12/04/Loguru%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Loguru 是一个灵活、易于使用的 Python 日志库</p><h3 id="1-Loguru的使用"><a href="#1-Loguru的使用" class="headerlink" title="1.Loguru的使用"></a>1.Loguru的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Loguru 是一个灵活、易于使用的 Python 日志库</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">特点:</span><br><span class="hljs-string">-简单易用</span><br><span class="hljs-string">-灵活的配置</span><br><span class="hljs-string">-动态配置</span><br><span class="hljs-string">-异步日志记录</span><br><span class="hljs-string">-异常追踪</span><br><span class="hljs-string">-自动轮转和归档</span><br><span class="hljs-string">-支持多种输出目标</span><br><span class="hljs-string">-自定义字段</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-Loguru的安装和日志级别"><a href="#2-Loguru的安装和日志级别" class="headerlink" title="2.Loguru的安装和日志级别"></a>2.Loguru的安装和日志级别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install loguru<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">整理了一些常用国内镜像源</span><br><span class="hljs-string">-清华（推荐）：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="hljs-string">-阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="hljs-string">-中国科技大学 ：https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="hljs-string">-豆瓣：http://pypi.douban.com/simple/</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">日志级别:</span><br><span class="hljs-string">标准日志级别:</span><br><span class="hljs-string">1.DEBUG（调试）:详细的调试信息，通常仅在调试阶段使用</span><br><span class="hljs-string">2.INFO（信息）:提供一般性的信息，用于追踪程序的运行情况</span><br><span class="hljs-string">3.WARNING（警告）:表示可能的问题，不影响程序的正常运行。</span><br><span class="hljs-string">4.ERROR（错误）:表示出现了错误，但程序仍然能够继续执行。</span><br><span class="hljs-string">5.CRITICAL（临界）:表示严重的错误，可能导致程序无法继续执行</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># SUCCESS和TRACE是loguru自己增加的两个级别，TRACE是最低级别的，SUCCESS是介于INFO和WARNING之间的级别</span><br><span class="hljs-comment"># TRACE（跟踪）:用于提供最详细的信息，通常用于追踪程序的执行流程。TRACE级别的日志是最详细的，通常在开发和调试过程中使用。</span><br><span class="hljs-comment"># SUCCESS  一切正常，几乎不用</span><br></code></pre></td></tr></table></figure><h3 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># loguru的使用比较简单 一个add()方法就能做完所有事情</span><br><span class="hljs-comment"># settings.py</span><br><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger  <br><span class="hljs-keyword">import</span> os<br><br>LOG_DIR = os.path.join(BASE_DIR, <span class="hljs-string">&quot;logs&quot;</span>)  <span class="hljs-comment"># 定义日志文件目录，确保该目录存在</span><br><span class="hljs-comment"># 可以做判断 不存在则创建 os.mkdir</span><br><br>LOGGING_CONFIG = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 禁用默认的 Django logging 配置</span><br><br>logger.remove(handler_id=<span class="hljs-literal">None</span>)  <span class="hljs-comment"># 指定不在控制台输出(默认输出在控制台中)</span><br>logger.add(os.path.join(LOG_DIR, <span class="hljs-string">&quot;debug.log&quot;</span>), level=<span class="hljs-string">&quot;DEBUG&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span>)<br>logger.add(os.path.join(LOG_DIR, <span class="hljs-string">&quot;info.log&quot;</span>), level=<span class="hljs-string">&quot;INFO&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span>)<br>logger.add(os.path.join(LOG_DIR, <span class="hljs-string">&quot;error.log&quot;</span>), level=<span class="hljs-string">&quot;ERROR&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span>)<br>logger.add(os.path.join(LOG_DIR, <span class="hljs-string">&quot;critical.log&quot;</span>), level=<span class="hljs-string">&quot;CRITICAL&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span>)<br><span class="hljs-comment"># 参数分别为: 文件保存的路径，日志级别，每隔一天创建一个log，最长保留时间</span><br><span class="hljs-comment"># rotation=&quot;500MB&quot;, compression=&quot;zip&quot; 的意思是当日志文件达到500MB的时候会自动压缩为zip格式并新建一个log文件</span><br><br><span class="hljs-comment"># views.py 注册功能示例</span><br><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">regi</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">try</span>:<br>        username=request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password=request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">and</span> password:<br>            user = User.objects.create_user(username=username, password=password)<br>            logger.info(<span class="hljs-string">&#x27;%s注册了账号&#x27;</span> % username)  <span class="hljs-comment"># 用户注册成功后会在info.log输出-xx注册了账号-</span><br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/login/&#x27;</span>)<br><br>        logger.info(<span class="hljs-string">&#x27;一个注册请求&#x27;</span>) <span class="hljs-comment"># 当用户访问注册页面时会在info.log输出一个-注册请求-</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;regi.html&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.critical(<span class="hljs-string">&#x27;异常为:%s&#x27;</span> %e) <span class="hljs-comment"># 报错时记录错误信息，并写入critical.log文件中</span><br>        <br><span class="hljs-comment"># 以上的这种写法会把高级别的日志信息写入对应的以及更低级别的日志文件中，会占用更多的资源。</span><br><span class="hljs-comment"># 只需要增加参数filter即可实现写入对应级别的文件中:</span><br><span class="hljs-built_in">filter</span>=<span class="hljs-keyword">lambda</span> x:<span class="hljs-string">&#x27;CRITICAL&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(x[<span class="hljs-string">&#x27;level&#x27;</span>]).upper() <span class="hljs-comment"># 加上一个过滤的参数</span><br><br><span class="hljs-keyword">lambda</span> x:: 这创建了一个匿名函数，接受一个参数 x。<br><span class="hljs-string">&#x27;CRITICAL&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(x[<span class="hljs-string">&#x27;level&#x27;</span>]).upper(): 这是一个条件表达式，检查日志记录中的级别是否包含字符串 <span class="hljs-string">&#x27;CRITICAL&#x27;</span>。具体操作如下：<br>x[<span class="hljs-string">&#x27;level&#x27;</span>]: 获取日志记录中的级别。<br><span class="hljs-built_in">str</span>(...): 将级别转换为字符串。<br>.upper(): 将字符串转换为大写。这是为了确保不区分大小写。<br><span class="hljs-string">&#x27;CRITICAL&#x27;</span> <span class="hljs-keyword">in</span> ...: 检查是否字符串 <span class="hljs-string">&#x27;CRITICAL&#x27;</span> 包含在转换后的字符串中。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
