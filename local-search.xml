<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Loguru的使用</title>
    <link href="/2023/12/04/Loguru%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/12/04/Loguru%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Loguru 是一个灵活、易于使用的 Python 日志库</p><h3 id="1-Loguru的使用"><a href="#1-Loguru的使用" class="headerlink" title="1.Loguru的使用"></a>1.Loguru的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Loguru 是一个灵活、易于使用的 Python 日志库</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">特点:</span><br><span class="hljs-string">-简单易用</span><br><span class="hljs-string">-灵活的配置</span><br><span class="hljs-string">-动态配置</span><br><span class="hljs-string">-异步日志记录</span><br><span class="hljs-string">-异常追踪</span><br><span class="hljs-string">-自动轮转和归档</span><br><span class="hljs-string">-支持多种输出目标</span><br><span class="hljs-string">-自定义字段</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-Loguru的安装和日志级别"><a href="#2-Loguru的安装和日志级别" class="headerlink" title="2.Loguru的安装和日志级别"></a>2.Loguru的安装和日志级别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install loguru<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">整理了一些常用国内镜像源</span><br><span class="hljs-string">-清华（推荐）：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="hljs-string">-阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="hljs-string">-中国科技大学 ：https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="hljs-string">-豆瓣：http://pypi.douban.com/simple/</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">日志级别:</span><br><span class="hljs-string">标准日志级别:</span><br><span class="hljs-string">1.DEBUG（调试）:详细的调试信息，通常仅在调试阶段使用</span><br><span class="hljs-string">2.INFO（信息）:提供一般性的信息，用于追踪程序的运行情况</span><br><span class="hljs-string">3.WARNING（警告）:表示可能的问题，不影响程序的正常运行。</span><br><span class="hljs-string">4.ERROR（错误）:表示出现了错误，但程序仍然能够继续执行。</span><br><span class="hljs-string">5.CRITICAL（临界）:表示严重的错误，可能导致程序无法继续执行</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># SUCCESS和TRACE是loguru自己增加的两个级别，TRACE是最低级别的，SUCCESS是介于INFO和WARNING之间的级别</span><br><span class="hljs-comment"># TRACE（跟踪）:用于提供最详细的信息，通常用于追踪程序的执行流程。TRACE级别的日志是最详细的，通常在开发和调试过程中使用。</span><br><span class="hljs-comment"># SUCCESS  一切正常，几乎不用</span><br></code></pre></td></tr></table></figure><h3 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># loguru的使用比较简单 一个add()方法就能做完所有事情</span><br><span class="hljs-comment"># settings.py</span><br><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger  <br><span class="hljs-keyword">import</span> os<br><br>LOG_DIR = os.path.join(BASE_DIR, <span class="hljs-string">&quot;logs&quot;</span>)  <span class="hljs-comment"># 定义日志文件目录，确保该目录存在</span><br><span class="hljs-comment"># 可以做判断 不存在则创建 os.mkdir</span><br><br>LOGGING_CONFIG = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 禁用默认的 Django logging 配置</span><br><br>logger.remove(handler_id=<span class="hljs-literal">None</span>)  <span class="hljs-comment"># 指定不在控制台输出(默认输出在控制台中)</span><br>logger.add(os.path.join(LOG_DIR, <span class="hljs-string">&quot;debug.log&quot;</span>), level=<span class="hljs-string">&quot;DEBUG&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span>)<br>logger.add(os.path.join(LOG_DIR, <span class="hljs-string">&quot;info.log&quot;</span>), level=<span class="hljs-string">&quot;INFO&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span>)<br>logger.add(os.path.join(LOG_DIR, <span class="hljs-string">&quot;error.log&quot;</span>), level=<span class="hljs-string">&quot;ERROR&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span>)<br>logger.add(os.path.join(LOG_DIR, <span class="hljs-string">&quot;critical.log&quot;</span>), level=<span class="hljs-string">&quot;CRITICAL&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span>)<br><span class="hljs-comment"># 参数分别为: 文件保存的路径，日志级别，每隔一天创建一个log，最长保留时间</span><br><span class="hljs-comment"># rotation=&quot;500MB&quot;, compression=&quot;zip&quot; 的意思是当日志文件达到500MB的时候会自动压缩为zip格式并新建一个log文件</span><br><br><span class="hljs-comment"># views.py 注册功能示例</span><br><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">regi</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">try</span>:<br>        username=request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password=request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">and</span> password:<br>            user = User.objects.create_user(username=username, password=password)<br>            logger.info(<span class="hljs-string">&#x27;%s注册了账号&#x27;</span> % username)  <span class="hljs-comment"># 用户注册成功后会在info.log输出-xx注册了账号-</span><br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/login/&#x27;</span>)<br><br>        logger.info(<span class="hljs-string">&#x27;一个注册请求&#x27;</span>) <span class="hljs-comment"># 当用户访问注册页面时会在info.log输出一个-注册请求-</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;regi.html&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.critical(<span class="hljs-string">&#x27;异常为:%s&#x27;</span> %e) <span class="hljs-comment"># 报错时记录错误信息，并写入critical.log文件中</span><br>        <br><span class="hljs-comment"># 以上的这种写法会把高级别的日志信息写入对应的以及更低级别的日志文件中，会占用更多的资源。</span><br><span class="hljs-comment"># 只需要增加参数filter即可实现写入对应级别的文件中:</span><br><span class="hljs-built_in">filter</span>=<span class="hljs-keyword">lambda</span> x:<span class="hljs-string">&#x27;CRITICAL&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(x[<span class="hljs-string">&#x27;level&#x27;</span>]).upper() <span class="hljs-comment"># 加上一个过滤的参数</span><br><br><span class="hljs-keyword">lambda</span> x:: 这创建了一个匿名函数，接受一个参数 x。<br><span class="hljs-string">&#x27;CRITICAL&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(x[<span class="hljs-string">&#x27;level&#x27;</span>]).upper(): 这是一个条件表达式，检查日志记录中的级别是否包含字符串 <span class="hljs-string">&#x27;CRITICAL&#x27;</span>。具体操作如下：<br>x[<span class="hljs-string">&#x27;level&#x27;</span>]: 获取日志记录中的级别。<br><span class="hljs-built_in">str</span>(...): 将级别转换为字符串。<br>.upper(): 将字符串转换为大写。这是为了确保不区分大小写。<br><span class="hljs-string">&#x27;CRITICAL&#x27;</span> <span class="hljs-keyword">in</span> ...: 检查是否字符串 <span class="hljs-string">&#x27;CRITICAL&#x27;</span> 包含在转换后的字符串中。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
